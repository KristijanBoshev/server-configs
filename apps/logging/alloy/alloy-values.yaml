alloy:
  configMap:
    create: true
    content: |
      logging {
        level = "info"
        format = "logfmt"
      }

      loki.write "default" {
        endpoint {
          url = "http://loki-gateway.default.svc.cluster.local/loki/api/v1/push"
        }
      }

      discovery.kubernetes "pods" {
        role = "pod"
      }

      discovery.relabel "pod_logs" {
        targets = discovery.kubernetes.pods.targets

        rule {
          source_labels = ["__meta_kubernetes_pod_phase"]
          action        = "keep"
          regex         = "Running|Pending|Failed|CrashLoopBackOff"
        }

        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          target_label  = "namespace"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          target_label  = "pod"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          target_label  = "container"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_node_name"]
          target_label  = "node"
        }
      }

      loki.source.kubernetes "pods" {
        targets    = discovery.relabel.pod_logs.output
        forward_to = [loki.write.default.receiver]
      }

      prometheus.remote_write "to_prometheus" {
        endpoint {
          url = "http://prometheus-server.monitoring.svc.cluster.local/api/v1/write"
        }
      }

      prometheus.exporter.self "alloy" {}

      prometheus.scrape "alloy_self" {
        targets         = prometheus.exporter.self.alloy.targets
        forward_to      = [prometheus.remote_write.to_prometheus.receiver]
        scrape_interval = "15s"
        scrape_timeout  = "10s"
      }

      discovery.kubernetes "services" {
        role = "service"
      }

      prometheus.scrape "k8s_pods" {
        targets         = discovery.kubernetes.pods.targets
        forward_to      = [prometheus.remote_write.to_prometheus.receiver]
        scrape_interval = "30s"
      }

      prometheus.scrape "k8s_services" {
        targets         = discovery.kubernetes.services.targets
        forward_to      = [prometheus.remote_write.to_prometheus.receiver]
        scrape_interval = "30s"
      }

  mounts:
    varlog: true
    dockercontainers: true

  serviceAccount:
    create: true

  rbac:
    create: true

  ingress:
    enabled: true
    ingressClassName: traefik
    annotations:
      traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
      traefik.ingress.kubernetes.io/router.tls: "true"
      traefik.ingress.kubernetes.io/router.tls.certresolver: "letsencrypt"
    hosts:
      - alloy.valuxa.shop
